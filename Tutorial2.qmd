---
title: "Tutorial 2 - Ggplot2 e Tidyverse"
execute: 
  echo: true
---

```{r}
#| label: setup
#| message: false
#| warning: false

library(tidyverse)
library(readxl) # para fazer leitura de arquivos excel
library(knitr) # para formatar tabelas
```

# Carregando os dados

Neste tutorial vamos aprender um pouco mais sobre o `ggplot` em conjunto com os outros pacotes do `tidyverse`.

Para praticar, vamos usar o dataset `netflix_series_limpo.xlsx`, o dataset `NetflixViewingHistory.csv` e o dataset `imdb_series.xlsx` e o dataset `imdb.rds` de filmes. Portanto, o primeiro passo será carregar os datasets:

```{r}
#| echo: false
#| eval: true

xfun::pkg_load2(c('htmltools', 'mime'))
xfun::embed_dir("data1ggplot/", text = "Você pode baixar os dados aqui.")

```

```{r}
#| label: tidyverse


netflix <- read_xlsx("data1ggplot/netflix_series_limpo.xlsx")

imdb <- read_xlsx("data1ggplot/imdb_series.xlsx")

imdb_filmes <- read_rds("data1ggplot/imdb.rds") #está usando uma função do pacote readr do tidyverse

netflix_filmes <- read_csv("data1ggplot/NetflixViewingHistory.csv") %>% 
  separate(Title, c("movie_title","season","episode"),":") %>% 
  filter(is.na(episode)) %>% 
  select(movie_title, Date) %>% 
  mutate(Date = lubridate::as_date(Date, format="%m/%d/%y")) %>% 
  left_join(imdb_filmes, by=c("movie_title"="titulo")) %>% 
  filter(!is.na(id_filme))

```

# Tipos de visualizações

A visualização de dados é uma ferramenta poderosa que não só simplifica a compreensão de grandes volumes de dados, mas também desempenha um papel crucial na estatística aplicada e no aprendizado de máquina. Imagine o potencial de desbloquear insights valiosos e identificar padrões ocultos em seus conjuntos de dados! Com um conhecimento prévio do assunto, você pode explorar as nuances dos dados e revelar conexões significativas que podem surpreender e iluminar tanto você quanto sua audiência.

![](images/Screenshot%202024-03-31%20at%204.45.55%20PM.png)

# Gráfico de Dispersão

Quando há necessidade de encontrar correlações, são utilizados os gráficos de dispersão. Se existir um conjunto de dados XY, então um gráfico de dispersão é utilizado para encontrar a relação entre as variáveis X e Y.

## Exemplo Base

Para realizar gráficos de dispersão, precisamos passar a função `geom_point()` como uma nova camada do `ggplot`. As coordenadas `x` e `y` devem ser numéricas necessariamente. Vamos usar como exemplo, o dataframe `imdb_filmes`.

No exemplo, a posição do ponto no eixo `x` pode ser dada pela coluna `orcamento` e a posição do ponto no eixo `y` pela coluna `receita`.

```{r}
#| label: dispersao

imdb_filmes %>% 
  ggplot()

```

## Adicionando cores

Podemos adicionar cores grupalmente para todos os pontos ou podemos usar alguma outra variável para criar cores em gradiente

```{r}
#| label: dispersao-cores

```

Para ver mais detalhamento da função `geom_point()` recomenda-se a leitura do Capítulo 8 do Livro ["Curso-R"](https://livro.curso-r.com/8-1-o-pacote-ggplot2.html#gr%C3%A1ficos-de-pontos-dispers%C3%A3o).

# Gráfico de Barras

Um gráfico de barras também exibe tendências ao longo do tempo. No caso de múltiplas variáveis, um gráfico de barras pode facilitar a comparação dos dados para cada variável em todos os momentos no tempo. Por exemplo, um gráfico de barras pode ser utilizado para comparar o crescimento da empresa ano a ano.

## Exemplo Base

Para realizar gráficos de barras usamos `geom_col()`. Vamos usar o dataframe `imdb_filmes` para exemplificar, ordenando as linhas por ordem decrescente de `UserRating`. Primeiro vamos gerar o gráfico com as configuração padrão.

```{r}
#| label: barras
imdb_filmes %>% 
  arrange(desc(nota_imdb)) %>% 
  head(10)  # adicionar código do ggplot

```

## Mudando os eixos e adicionando cores

Podemos mudar os eixos (trocar de eixo) usando a função `coord_flip()`

```{r}
#| label: barras-add
imdb_filmes %>% 
  arrange(desc(nota_imdb)) %>% 
  head(10)

```

Vamos aplicar tudo o aprendido num segundo exemplo, usando o dataframe `imdb` para mostrar os seriados com maior número de votos `UserVotes`.

```{r}
#| label: barras2
imdb %>% 
  group_by(series_name) %>% 
  summarize(Votos = sum(UserVotes)) %>% 
  arrange(desc(Votos)) #adicionar ggplot

```

Você pode ver mais exemplos no Capítulo 8 do livro [Curso-R](https://livro.curso-r.com/8-1-o-pacote-ggplot2.html#gr%C3%A1ficos-de-barras)

# Gráfico de linha

Gráficos de linhas são utilizados para exibir tendências ao longo do tempo. O eixo X é geralmente utilizado para representar um período, enquanto o eixo Y é utilizado para representar a quantidade associada ao período de tempo no eixo X. Por exemplo, um gráfico de linhas pode ilustrar o horário de pico de visitas em um shopping durante o dia, dividido por dias da semana e horas.

## Exemplo Base

Vamos fazer um gráfico de linha usando a função `geom_line()` como camada do `ggplot` usando o dataset `netflix_filmes` para mostrar o total de capítulos assistidos por dia.

```{r}
#| label: linha-dia

netflix_filmes %>%  #colocar código ggplot
  group_by(Date) %>% 
  summarize(filmes=n())
```

Podemos agrupar contagens usando a função `floor_date` do pacote `lubridate` para meses, trimestres, etc. Adicionalmente, podemos incluir cores.

```{r}
#| label: linha-mes

netflix_filmes %>% 
  count(mes = lubridate::floor_date(Date, "month"))
```

## Adicionando mais de uma linha

Vamos usar o dataset `imdb_filmes` para comparar o desempenho dos filmes (nota imdb) em função de ter lucro ou não. Vamos adicionar também uma camada extra para nos mostrar a tendência de ambas curvas, usando `geom_smooth()`.

```{r}
imdb_filmes %>% 
  mutate(lucro = receita - orcamento,
         lucro_factor = ifelse(lucro > 0, "Sim","Não")) %>% 
  filter(!is.na(lucro)) %>% 
  group_by(lucro_factor,ano) %>% 
  summarise(nota_media=mean(nota_imdb,na.rm=TRUE))

```

Você pode ver mais exemplos do `geom_line()` no livro [Curso-R](https://livro.curso-r.com/8-1-o-pacote-ggplot2.html#gr%C3%A1ficos-de-linhas)

# Gráfico de Boxplot

Um gráfico de boxplot, também conhecido como diagrama de caixa, é uma ferramenta de visualização estatística que fornece uma representação compacta e informativa da distribuição de um conjunto de dados. Consiste em um retângulo ("caixa") que se estende de um quartil ao outro, com uma linha vertical (ou "whisker") estendendo-se de cada extremidade da caixa para representar a amplitude dos dados fora do intervalo interquartil.

## Exemplo Base

Vamos usar os dados do dataset `imdb` para comparar as notas de `UserRating` em cada temporada do seriado `The Walking Dead`.

```{r}
#| label: boxplot

seriado_escolhido <- "The Walking Dead"

imdb %>% 
  filter(series_name == seriado_escolhido) %>% 
  select(1,2,4,7) 

```

## Adicionando cores por meio de paletas pré-definidas

Vamos adicionar cores para cada temporada, para isto precisamos incluir o argumento `fill` dentro da camada de estetica `aes`. Podemos também escolher as cores de paletas pré-definidas como: `scale_fill_viridis_d()` e `scale_fill_brewer()`

```{r}
#| label: boxplot-cores

imdb %>% 
  filter(series_name == seriado_escolhido) %>% 
  select(1,2,4,7) 

```

# Gráfico de Histograma

Um histograma representa dados usando barras de alturas diferentes. Geralmente, cada barra agrupa números em intervalos em um histograma. Quanto mais alta as barras, mais dados se encaixam nesse intervalo. É usado para exibir a forma e a dispersão de amostras de um conjunto de dados contínuos. Por exemplo, podemos usar um histograma para medir as frequências de cada resposta em uma pergunta de pesquisa. As barras representariam as respostas: "ruim", "bom" e "ótimo".

O Histograma serve para observar a distribuição dos dados e eventualmente serve para comparar mais de uma distribuição.

## Exemplo Base

Vamos continuar com os dados sobre `UserRating` usados anteriormente para graficar Boxplots. Neste caso, vamos graficar a distribuição do `UserRating` considerando apenas a contagem. Podemos usar o argumento `bins` ou `binwidth` para ajustar melhor o resultado.

```{r}
#| label: histo1
imdb %>% 
  filter(series_name == seriado_escolhido) %>% 
  select(1,2,4,7) 
```

Agora, vamos usar o dataset `imdb_filmes` para verificar quão lucrativo é um determinado genero.

```{r}
#| label: histo2

genero_escolhido <- "Comedy"

imdb_filmes %>% 
  #filter(str_detect(string = generos, pattern = genero_escolhido)) %>% 
  filter(generos == genero_escolhido) %>% 
  mutate(lucro = receita - orcamento)

```

## Adicionando cores

Podemos melhorar a apresentação, escolhendo cores diferentes adicionando o argumento `fill` dentro de `geom_histogram()`.

```{r}
imdb_filmes %>% 
  #filter(str_detect(string = generos, pattern = genero_escolhido)) %>% 
  filter(generos == genero_escolhido) %>% 
  mutate(lucro = receita - orcamento) 
```

Você pode ver mais exemplos do Histogramas e Boxplots no Cap. 8 do livro [Curso-R](https://livro.curso-r.com/8-1-o-pacote-ggplot2.html#histogramas-e-boxplots)

Podemos usar alternativamente um outro tipo de visualização muito similar, que é a `geom_density()`. Vamos usar os mesmos exemplos anteriores.

```{r}
#| label: density1
imdb %>% 
  filter(series_name == seriado_escolhido) %>% 
  select(1,2,4,7)
```

Podemos também customizar a cor da linha e da área abaixo da densidade usando os argumentos `fill` e `color` dentro do `geom_density()` bem como a transparência usando `alpha`.

```{r}
#| label: density2

imdb_filmes %>% 
  #filter(str_detect(string = generos, pattern = genero_escolhido)) %>% 
  filter(generos == genero_escolhido) %>% 
  mutate(lucro = receita - orcamento)
```

E por fim, podemos comparar duas ou mais categorias. Vamos fazer isso, comparando os generos "Comedy" e "Drama" para saber se há diferenças significativas em termos de lucro. Para isto, vamos incluir o argumento `group` dentro da camada `aes` além de `fill` e `color`. Adicionalmente podemos incluir `alpha` dentro de `geom_density()`.

```{r}
imdb_filmes %>% 
  #filter(str_detect(string = generos, pattern = genero_escolhido)) %>% 
  filter(generos %in% c("Comedy","Drama")) %>% 
  mutate(lucro = receita - orcamento)
```

# Diagramas Sankey

Diagramas Sankey são representações visuais que mostram o fluxo de dados, energia, recursos ou informações através de caminhos ou processos. Eles consistem em setas de larguras variáveis, onde a largura das setas é proporcional à quantidade de fluxo, facilitando a compreensão e análise de sistemas complexos de fluxo.

![](images/sankey-diagram-examples-imigration-flow.png)

# Outras customizações

O ggplot inclui praticamente customizações infinitas, desde as mais simples, como atribuir títulos aos eixos até mudar as escalas, por exemplo usando transformações logarítmicas.

```{r}
imdb_filmes %>% 
  mutate(lucro = receita-orcamento) %>% 
  ggplot(aes(x = orcamento, y = receita, color=lucro)) +
  geom_point(alpha=0.5)+
  scale_y_log10()+
  scale_x_log10()+
  geom_smooth(method = "lm", se=FALSE)+
  theme_bw()+
  scale_color_gradient(low = "red", high = "green")

```
