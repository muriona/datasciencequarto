---
title: "Tutorial 3 - Matplotlib"
subtitle: "Aprendendo a fazer gráficos"
jupyter: python3
---

## Carregando os pacotes

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
```

## Lendo os dados

```{python}
#| echo: false

import os
from IPython.display import HTML

def create_downloadable_dir_listing(directory, message="You can download the data here."):
    file_list = os.listdir(directory)
    html_content = f"<p>{message}</p><ul>"
    for file in file_list:
        html_content += f'<li><a href="{directory}/{file}" download>{file}</a></li>'
    html_content += "</ul>"
    return HTML(html_content) 

# Example usage
create_downloadable_dir_listing("pydata3/", message="Você pode baixar os dados aqui.")
```

```{python}

imdb_filmes = pd.read_csv("pydata3/imdb_filmes.csv")
```

```{python}
imdb_filmes.info()
```

```{python}
imdb_filmes.describe()
```

```{python}
imdb_filmes.sample(8)
```

## Limpeza dos dados

Vamos converter a coluna `data_lancamento` para formato `data`.

```{python}

# Get all unique non-date values from `data_lancamento`
non_date_values = imdb_filmes[pd.to_datetime(imdb_filmes['data_lancamento'], errors='coerce').isna()]['data_lancamento'].unique() 

if (len(non_date_values) > 20):
  # Sample 20 of them if there are too many unique values
  print(f"Non-date values in `data_lancamento`: {np.random.choice(non_date_values, 20, replace=False)}")
else:
  # Otherwise print all unique non-date values from `data_lancamento`
  print(f"Non-date values in `data_lancamento`: {non_date_values}")
```

```{python}

imdb_filmes['data_lancamento']=pd.to_datetime(imdb_filmes['data_lancamento'], format='%Y-%m-%d',
errors='coerce')
```

# Tipos de visualizações

A visualização de dados é uma ferramenta poderosa que não só simplifica a compreensão de grandes volumes de dados, mas também desempenha um papel crucial na estatística aplicada e no aprendizado de máquina. Imagine o potencial de desbloquear insights valiosos e identificar padrões ocultos em seus conjuntos de dados! Com um conhecimento prévio do assunto, você pode explorar as nuances dos dados e revelar conexões significativas que podem surpreender e iluminar tanto você quanto sua audiência.

![](images/Screenshot%202024-03-31%20at%204.45.55%20PM.png)

# Gráfico de Dispersão

Quando há necessidade de encontrar correlações, são utilizados os gráficos de dispersão. Se existir um conjunto de dados XY, então um gráfico de dispersão é utilizado para encontrar a relação entre as variáveis X e Y.

As coordenadas `x` e `y` devem ser numéricas necessariamente. Vamos usar como exemplo, o dataframe `imdb_filmes`.

No exemplo, a posição do ponto no eixo `x` pode ser dada pela coluna `orcamento` e a posição do ponto no eixo `y` pela coluna `receita`.

```{python}

plt.scatter(imdb_filmes['orcamento'], imdb_filmes['receita'])
plt.show()
```

Deixando o gráfico mais informativo:

```{python}
plt.scatter(imdb_filmes['orcamento'], imdb_filmes['receita'],color='darkred',alpha=0.2)
plt.title('Gráfico de Dispersão entre Orçamento x Receita')
plt.xlabel('Orçamento')
plt.ylabel('Receita')
plt.show()
```

# Gráfico de Barras

Um gráfico de barras também exibe tendências ao longo do tempo. No caso de múltiplas variáveis, um gráfico de barras pode facilitar a comparação dos dados para cada variável em todos os momentos no tempo. Por exemplo, um gráfico de barras pode ser utilizado para comparar o crescimento da empresa ano a ano.

Vamos usar o dataframe `imdb_filmes` para exemplificar, ordenando as linhas por ordem decrescente de `nota_imdb`. Primeiro vamos gerar o gráfico com as configuração padrão.

```{python}

imdb_summary = imdb_filmes.sort_values('nota_imdb',
ascending=False).head(8)

```

```{python}

plt.bar(imdb_summary['titulo'], imdb_summary['nota_imdb'])
```

Mas os nomes dos filmes estão sobrepostos, então neste caso é recomendável realizar um gráfico de barras horizontais.

```{python}
plt.barh(imdb_summary['titulo'], imdb_summary['nota_imdb'])
plt.title('Top 10 Filmes por Nota IMDB')
plt.xlabel('Nota IMDB')
plt.show()
```

# Gráfico de linha

Gráficos de linhas são utilizados para exibir tendências ao longo do tempo. O eixo X é geralmente utilizado para representar um período, enquanto o eixo Y é utilizado para representar a quantidade associada ao período de tempo no eixo X. Por exemplo, um gráfico de linhas pode ilustrar o horário de pico de visitas em um shopping durante o dia, dividido por dias da semana e horas.

Vamos fazer um gráfico utilizando a coluna `data_lancamento`

```{python}

imdb_lancamento = imdb_filmes.groupby('data_lancamento').agg({'titulo':"count",'nota_imdb':'mean','duracao':'mean'})

imdb_lancamento.head()
```

```{python}
plt.plot(imdb_lancamento.index, imdb_lancamento['nota_imdb'])
plt.title('Tendência de notas imdb ao longo do tempo')
plt.xlabel('Data de Lançamento')
plt.ylabel('Nota IMDB')
plt.show()
```

é interessante porém, fica difícil de ver a tendência, vamos agrupar os filmes por ano e refazer o gráfico.

```{python}

imdb_anual = imdb_filmes.groupby(pd.Grouper(key='data_lancamento', freq='Y'))['nota_imdb'].mean()

imdb_anual.head()
```

```{python}

plt.plot(imdb_anual.index, imdb_anual.values)
plt.title('Tendência de notas imdb anuais ao longo do tempo')
plt.xlabel('Ano de Lançamento')
plt.ylabel('Nota Média IMDB')
plt.show()
```

Também podemos plotar duas ou mais linhas. Vamos calcular intervalo interquartil e inclui-la no gráfico anterior.

```{python}

imdb_anual_25th = imdb_filmes.groupby(pd.Grouper(key='data_lancamento', freq='Y'))['nota_imdb'].quantile(0.25)
imdb_anual_75th = imdb_filmes.groupby(pd.Grouper(key='data_lancamento', freq='Y'))['nota_imdb'].quantile(0.75)
```

```{python}

plt.plot(imdb_anual.index, imdb_anual.values,label='Média')
plt.plot(imdb_anual_25th.index, imdb_anual_25th.values,label='25 Percentil')
plt.plot(imdb_anual_75th.index, imdb_anual_75th.values,label='75 Percentil')
plt.title('Tendência de notas médias e IRQ do imdb anuais ao longo do tempo')
plt.xlabel('Ano de Lançamento')
plt.ylabel('Nota IMDB')
plt.legend()
plt.show()
```

# Gráfico de Boxplot

Um gráfico de boxplot, também conhecido como diagrama de caixa, é uma ferramenta de visualização estatística que fornece uma representação compacta e informativa da distribuição de um conjunto de dados. Consiste em um retângulo (“caixa”) que se estende de um quartil ao outro, com uma linha vertical (ou “whisker”) estendendo-se de cada extremidade da caixa para representar a amplitude dos dados fora do intervalo interquartil.

```{python}

imdb_filmes['ano'] = imdb_filmes['data_lancamento'].dt.year

imdb_filmes['decada'] = imdb_filmes['ano'] // 10 * 10

imdb_filmes['decada'].astype('category')

imdb_filmes.head()
```

```{python}
data_to_plot = [imdb_filmes[imdb_filmes['decada'] == decada]['nota_imdb'] for decada in imdb_filmes['decada'].unique()]


plt.boxplot(data_to_plot, showmeans=True)
plt.show()

```

uma outra forma de plotar um Boxplot é utilizando a library `seaborn`

```{python}
import seaborn as sns

sns.boxplot(x='decada', y='nota_imdb', data=imdb_filmes, showmeans=True)
plt.title('Distribuição de notas IMDB por Década')
plt.ylabel('IMDb Rating')
plt.show()

```

O gráfico ficou ruim de visualizar, porém, é possível alterar as dimensões de qualquer gráfico matplotlib, utilizando a opção: `plt.figure(figsize=(15, 8))`. Também podemos mudar a cor de cada caixa.

```{python}

plt.figure(figsize=(15, 8))
sns.boxplot(x='decada', y='nota_imdb', hue='decada', data=imdb_filmes, showmeans=True)
plt.title('Distribuição de notas IMDB por Década')
plt.ylabel('IMDb Rating')
plt.show()
```

# Gráfico de Histograma

Um histograma representa dados usando barras de alturas diferentes. Geralmente, cada barra agrupa números em intervalos em um histograma. Quanto mais alta as barras, mais dados se encaixam nesse intervalo. É usado para exibir a forma e a dispersão de amostras de um conjunto de dados contínuos. Por exemplo, podemos usar um histograma para medir as frequências de resposta da variável `nota_imdb` .

O Histograma serve para observar a distribuição dos dados e eventualmente serve para comparar mais de uma distribuição.

```{python}

plt.hist(imdb_filmes['nota_imdb'], color='darkred', bins=30, edgecolor='black')
plt.xlabel('Nota IMDb')
plt.show()
```

também podemos utilizar `seaborn` para criar um histograma:

```{python}

sns.histplot(data=imdb_filmes, x='nota_imdb', 
bins=30, color='darkblue')
plt.xlabel('Nota IMDb')
plt.show()
```

# Gráfico de Pizza

```{python}

imdb_filmes['lucro']=(imdb_filmes['receita']-imdb_filmes['orcamento']) > 0

lucratividade = imdb_filmes['lucro'].value_counts()
labels = ['Com Lucro', 'Sem Lucro']
sizes = lucratividade.values

plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=40)
plt.title('Proporção de filmes lucrativos e não lucrativos')
plt.axis('equal')
plt.show()
```

Podemos alterar as cores da nossa pizza utilizando `cores = ['cor_1','cor_2',...,'cor_n']`.

```{python}


cores = ['#66b3ff','darkred']

plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=180, colors=cores)
plt.title('Proporção de filmes lucrativos e não lucrativos')
plt.axis('equal')
plt.show()
```

# Mapas de Correlação

```{python}

num_cols = imdb_filmes.select_dtypes(include=['int64', 'float64'])
corr_matrix = num_cols.corr()

sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Heatmap de Correlações')
plt.show()
```
